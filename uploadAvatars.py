# Written by Muhammad Danish
# Write a Script to update user avatars in Staffbase


# Python-dotenv reads key-value pairs from a .env file and can set them as environment variables
from dotenv import load_dotenv
import json
import requests
import os

# take environment variables from .env
load_dotenv()

# environment variables
API_TOKEN = os.getenv("API_TOKEN")
API_URL_BASE = os.getenv("API_URL_BASE")

BASIC_HEADERS = {'Authorization': 'Basic {0}'.format(API_TOKEN), 'Content-Type': 'application/json'}
MEDIA_HEADERS = {'Authorization': 'Basic {0}'.format(API_TOKEN)}


# uploadImages function takes a local image paths list
# uploads images one at a time
# after upload successfully, stores the image's new, hosted url
# returns these urls
def uploadImages(folder, paths):
    apiUrl = '{0}media'.format(API_URL_BASE)
    urls = []
    for i in range(len(paths)):
        path = paths[i]
        files = {"type": "image", "file": open("{0}/{1}".format(folder, path), "rb")}
        response = requests.post(apiUrl, headers=MEDIA_HEADERS, files=files)
        if response.status_code == 200:
            img_data = json.loads(response.content.decode('utf-8'))
            urls.append(img_data['resourceInfo']['url'])
            print("Successfully Uploaded {0} of {1}.".format(i + 1, len(paths)))
        else:
            print("Upload error")
    return urls


# updateProfilePictures function takes a list of ID (users to update)
# also takes a list of urls to images
# ids and images should be stored in the same order
# (this will happen automatically if the urls are generated by uploadImages functions)
# uses the id and url to update a user's avatar
def updateProfilePictures(ids, img_urls):
    for i in range(len(ids)):
        api_url = '{0}users/{1}'.format(API_URL_BASE, ids[i])
        avatar_update = {"avatar": img_urls[i]}
        {"avatar": "None"}
        response = requests.put(api_url, headers=BASIC_HEADERS, json=avatar_update)
        if response.status_code == 200:
            print("Successfully Updated avatar {0} of {1}.".format(i + 1, len(ids)))
        else:
            print("Error updating profile picture for user {0}.".format(ids[i]))
            print(response.status_code)


# local folder Name
folder = "Images"

# retrieve all the image paths from the folder including file extension
img_paths = os.listdir(folder)

# remove file extension
ids = [path[:-4] for path in img_paths]

# call an uploadImages function with all images
photo_urls = uploadImages(folder, img_paths)

# call update Profile Pictures function with all users ids and relevant images
updateProfilePictures(ids, photo_urls)
